sourceSets {
    main {
        java {
            srcDirs 'src' exclude 'log4j.properties'
            srcDirs 'src-asm'
            srcDirs 'src-charset'
        }
        resources {
            // srcDirs 'src' exclude 'log4j.properties'
        }
        compileClasspath = configurations.compile + configurations.compileOnly
    }
    bboss_rt {
        java {
            srcDirs 'src-rt'
        }
        resources {
            srcDirs 'src-rt'
        }
    }
}

jar {
    classifier = "all"
}

project.tasks.compileJava.dependsOn(project(':bboss-velocity').tasks.publish)

dependencies {
    compile(
            [group: 'com.sany.bbossframework', name: 'bboss-velocity', version: "${PROJ_VERSION}", transitive: false],
            [group: 'ant', name: 'ant', version: '1.6.4', transitive: false],
            [group: 'commons-lang', name: 'commons-lang', version: '2.6', transitive: false],
            [group: 'concurrent', name: 'concurrent', version: '1.3.2', transitive: false],
            [group: 'org.codehaus.jackson', name: 'jackson-mapper-asl', version: '1.9.10', transitive: false],
            [group: 'org.codehaus.jackson', name: 'jackson-core-asl', version: '1.9.10', transitive: false],
            [group: 'log4j', name: 'log4j', version: '1.2.17', transitive: false],
            [group: 'oro', name: 'oro', version: '2.0.8', transitive: false]
    )
    compileOnly(
            [group: 'servletapi', name: 'servletapi', version: '2.4', transitive: false],
            [group: 'javax.servlet', name: 'jsp-api', version: '2.0', transitive: false],
            [group: 'com.uwyn', name: 'jhighlight', version: '1.0', transitive: false],
            [group: 'bsh', name: 'bsh', version: '2.0b1', transitive: false]
    )
}

sourceSets.main { set ->
    def jarTask = task("${set.name}Jar", type: Jar, dependsOn: compileJava, overwrite: jar) {
        baseName = 'bboss-util'
        from set.output
    }
    def jarSourcesTask = task("${set.name}SourceJar", type: Jar) {
        classifier = "sources"
        from set.allJava
    }
    def docTask = task("${set.name}Doc", type: Javadoc) {
        classpath = set.compileClasspath
        source set.allJava
    }
    def jarDocTask = task("${set.name}DocJar", type: Jar, dependsOn: docTask) {
        classifier = "javadoc"
        from docTask.destinationDir
    }
    artifacts {
        archives jarTask
        archives jarSourcesTask
        archives jarDocTask
    }
}

sourceSets.bboss_rt { set ->
    def jarTask = task("${set.name}Jar", type: Jar, dependsOn: compileBboss_rtJava) {
        baseName = "bboss-rt"
        from set.output
    }
    def jarSourcesTask = task("${set.name}SourceJar", type: Jar) {
        baseName = "bboss-rt"
        classifier = "sources"
        from set.allJava
    }
    def docTask = task("${set.name}Doc", type: Javadoc) {
        source set.allJava
    }
    def jarDocTask = task("${set.name}DocJar", type: Jar, dependsOn: docTask) {
        baseName = "bboss-rt"
        classifier = "javadoc"
        from docTask
    }
    artifacts {
        archives jarTask
        archives jarSourcesTask
        archives jarDocTask
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifactId 'bboss-util'
            artifact mainJar
            artifact mainSourceJar
            artifact mainDocJar
        }
        rtmavenJava(MavenPublication) {
            from components.java
            artifactId 'bboss-rt'
            artifact bboss_rtJar
            artifact bboss_rtSourceJar
            artifact bboss_rtDocJar
        }
    }
    repositories {
        maven {
            credentials {
                username 'admin'
                password 'admin123'
            }
            if (project.version.endsWith('-SNAPSHOT')) {
                url "http://bdp.sany.com.cn/nexus/content/repositories/snapshots/"
            } else {
                url "http://bdp.sany.com.cn/nexus/content/repositories/releases/"
            }
        }
    }
}